#!/bin/bash

MYSQL_ROOT_PWD_FILE=/etc/yunohost/mysql

# Open a connection as a user
#
# example: ynh_mysql_connect_as --user="user" --password="pass" <<< "UPDATE ...;"
# example: ynh_mysql_connect_as --user="user" --password="pass" < /path/to/file.sql
#
# usage: ynh_mysql_connect_as --user=user --password=password [--database=database]
# | arg: -u, --user=        - the user name to connect as
# | arg: -p, --password=    - the user password
# | arg: -d, --database=    - the database to connect to
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_connect_as() {
    # Declare an array to define the options of this helper.
    local legacy_args=upd
    local -A args_array=( [u]=user= [p]=password= [d]=database= )
    local user
    local password
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    database="${database:-}"

    mysql --user="$user" --password="$password" --batch "$database"
}

# Execute a command as root user
#
# usage: ynh_mysql_execute_as_root --sql=sql [--database=database]
# | arg: -s, --sql=         - the SQL command to execute
# | arg: -d, --database=    - the database to connect to
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_execute_as_root() {
    # Declare an array to define the options of this helper.
    local legacy_args=sd
    local -A args_array=( [s]=sql= [d]=database= )
    local sql
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    database="${database:-}"

    ynh_mysql_connect_as --user="root" --password="$(cat $MYSQL_ROOT_PWD_FILE)" \
        --database="$database" <<< "$sql"
}

# Execute a command from a file as root user
#
# usage: ynh_mysql_execute_file_as_root --file=file [--database=database]
# | arg: -f, --file=        - the file containing SQL commands
# | arg: -d, --database=    - the database to connect to
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_execute_file_as_root() {
    # Declare an array to define the options of this helper.
    local legacy_args=fd
    local -A args_array=( [f]=file= [d]=database= )
    local file
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"
    database="${database:-}"

    ynh_mysql_connect_as --user="root" --password="$(cat $MYSQL_ROOT_PWD_FILE)" \
        --database="$database" < "$file"
}

# Create a database and grant optionnaly privilegies to a user
#
# [internal]
#
# usage: ynh_mysql_create_db db [user [pwd]]
# | arg: db - the database name to create
# | arg: user - the user to grant privilegies
# | arg: pwd - the password to identify user by
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_create_db() {
    local db=$1

    local sql="CREATE DATABASE ${db};"

    # grant all privilegies to user
    if [[ $# -gt 1 ]]
    then
        sql+=" GRANT ALL PRIVILEGES ON ${db}.* TO '${2}'@'localhost'"
        if [[ -n ${3:-} ]]; then
            sql+=" IDENTIFIED BY '${3}'"
        fi
        sql+=" WITH GRANT OPTION;"
    fi

    ynh_mysql_execute_as_root --sql="$sql"
}

# Drop a database
#
# [internal]
#
# If you intend to drop the database *and* the associated user,
# consider using ynh_mysql_remove_db instead.
#
# usage: ynh_mysql_drop_db db
# | arg: db - the database name to drop
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_drop_db() {
    ynh_mysql_execute_as_root --sql="DROP DATABASE ${1};"
}

# Dump a database
#
# example: ynh_mysql_dump_db --database=roundcube > ./dump.sql
#
# usage: ynh_mysql_dump_db --database=database
# | arg: -d, --database=    - the database name to dump
# | ret: the mysqldump output
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_dump_db() {
    # Declare an array to define the options of this helper.
    local legacy_args=d
    local -A args_array=( [d]=database= )
    local database
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    mysqldump --user="root" --password="$(cat $MYSQL_ROOT_PWD_FILE)" --single-transaction --skip-dump-date "$database"
}

# Create a user
#
# [internal]
#
# usage: ynh_mysql_create_user user pwd [host]
# | arg: user - the user name to create
# | arg: pwd - the password to identify user by
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_create_user() {
    ynh_mysql_execute_as_root \
        --sql="CREATE USER '${1}'@'localhost' IDENTIFIED BY '${2}';"
}

# Check if a mysql user exists
#
# usage: ynh_mysql_user_exists --user=user
# | arg: -u, --user=    - the user for which to check existence
# | exit: Return 1 if the user doesn't exist, 0 otherwise.
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_user_exists()
{
    # Declare an array to define the options of this helper.
    local legacy_args=u
    local -A args_array=( [u]=user= )
    local user
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    if [[ -z $(ynh_mysql_execute_as_root --sql="SELECT User from mysql.user WHERE User = '$user';") ]]
    then
        return 1
    else
        return 0
    fi
}

# Drop a user
#
# [internal]
#
# usage: ynh_mysql_drop_user user
# | arg: user - the user name to drop
#
# Requires YunoHost version 2.2.4 or higher.
ynh_mysql_drop_user() {
    ynh_mysql_execute_as_root --sql="DROP USER '${1}'@'localhost';"
}

# Create a database, an user and its password. Then store the password in the app's config
#
# usage: ynh_mysql_setup_db --db_user=user --db_name=name [--db_pwd=pwd]
# | arg: -u, --db_user=     - Owner of the database
# | arg: -n, --db_name=     - Name of the database
# | arg: -p, --db_pwd=      - Password of the database. If not provided, a password will be generated
#
# After executing this helper, the password of the created database will be available in $db_pwd
# It will also be stored as "mysqlpwd" into the app settings.
#
# Requires YunoHost version 2.6.4 or higher.
ynh_mysql_setup_db () {
    # Declare an array to define the options of this helper.
    local legacy_args=unp
    local -A args_array=( [u]=db_user= [n]=db_name= [p]=db_pwd= )
    local db_user
    local db_name
    db_pwd=""
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    local new_db_pwd=$(ynh_string_random)	# Generate a random password
    # If $db_pwd is not provided, use new_db_pwd instead for db_pwd
    db_pwd="${db_pwd:-$new_db_pwd}"

    ynh_mysql_create_db "$db_name" "$db_user" "$db_pwd"	# Create the database
    ynh_app_setting_set --app=$app --key=mysqlpwd --value=$db_pwd	# Store the password in the app's config
}

# Remove a database if it exists, and the associated user
#
# usage: ynh_mysql_remove_db --db_user=user --db_name=name
# | arg: -u, --db_user=     - Owner of the database
# | arg: -n, --db_name=     - Name of the database
#
# Requires YunoHost version 2.6.4 or higher.
ynh_mysql_remove_db () {
    # Declare an array to define the options of this helper.
    local legacy_args=un
    local -A args_array=( [u]=db_user= [n]=db_name= )
    local db_user
    local db_name
    # Manage arguments with getopts
    ynh_handle_getopts_args "$@"

    local mysql_root_password=$(cat $MYSQL_ROOT_PWD_FILE)
    if mysqlshow --user=root --password=$mysql_root_password | grep --quiet "^| $db_name"
    then	# Check if the database exists
        ynh_mysql_drop_db $db_name	# Remove the database	
    else
        ynh_print_warn --message="Database $db_name not found"
    fi

    # Remove mysql user if it exists
    if ynh_mysql_user_exists --user=$db_user; then
        ynh_mysql_drop_user $db_user
    fi
}
